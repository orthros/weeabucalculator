using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace WeeabuCalculator
{
    [SimulationDriver("SamuraiOpenerSimulation")]
    public class SamuraiOpenerSimulationDriver : DeepSimulationDriver
    {
        public static float BUFF_WINDOW_MAX = 24;
        public static float BUFF_WINDOW_MIN = 12;
        public static int MAX_GCD_STEPS = 13;

        [ImportingConstructor]
        public SamuraiOpenerSimulationDriver(JobMechanics job) : base(job)
        {
            TopSimulationsToKeep = -1;
        }

        public override (ResultState state, float score) GetResultScore(SimulationState result)
        {
            // The opener shouldn't be "ended" until all important CDs are running, Higanbana is ticking and all buffs/debuffs are up.
            bool openerComplete = Job.HasDoT(result, "Higanbana") &&
                                  Job.OnCooldown(result, "Hagakure") && Job.OnCooldown(result, "Meikyo Shisui") && Job.OnCooldown(result, "Hissatsu: Guren") &&
                                  Job.HasPerformedAction(result, "Midare Setsugekka");

            // The opener score should prioritize as much damage between 12 and 24s (for buff window)
            float buffWindowDamage = 0;
            foreach (var a in result.AllActions.GetActionsBetween(BUFF_WINDOW_MIN, BUFF_WINDOW_MAX))
            {
                buffWindowDamage += a.Damage;

                // action applies a DoT, include it's total snapshoted damage.
                if (a.DoT != null)
                {
                    // loss due to waiting to put this up.
                    var opportunityLoss = ((a.Time - BUFF_WINDOW_MIN) / 3f) * a.DoT.InitialState.Value.DamageOnTick;
                    buffWindowDamage += a.DoT.InitialState.Value.DamageOnTick * (a.DoT.Duration.Value / 3f) - opportunityLoss;
                }
            }

            var cdOpportunityCostLoss = 0f;
            if (openerComplete) // all CDs used
            {
                // Opportunity cost is determined by multiplying the potential damage generated by the skill by the time that the skill was ready, but not used.
                // This is meant to weigh more heavily early usage (to get a good idea of how well the full rotation will perform). Because it's being subtracted
                // from DPS, this value must also be expressed as DPS.

                // Hagakure's opportunity cost is (average) kenki gain from Hagakure, here using Shinten as a measure of kenki's damage potential.
                cdOpportunityCostLoss += (((result.Cooldowns.GetApplicationTime("Hagakure") ?? 0) / 40) * (40 / 25 * 300) * 1.21f) / result.CurrentTime;
                // Meikyo Shisui's opportunity cost is Midare's buffed potency, plus remainder kenki/damage ratio.
                cdOpportunityCostLoss += (((result.Cooldowns.GetApplicationTime("Meikyo Shisui") ?? 0) / 80) * (720 * 1.5f + (10 / 25 * 300)) * 1.21f) / result.CurrentTime;
                // Guren's opportunity cost loss is the damage it does minus the cost of kenki.
                cdOpportunityCostLoss += (((result.Cooldowns.GetApplicationTime("Hissatsu: Guren") ?? 0) / 120) * (800 - (50 / 25 * 300)) * 1.21f) / result.CurrentTime;
            }

            var buffWindowDPS = (buffWindowDamage / (result.CurrentTime - BUFF_WINDOW_MIN));

            // include all other DPS but count the buff window more, and subtract the opportunity cost from CDs.
            var score = result.Damage.DPS + buffWindowDPS * 0.15f - cdOpportunityCostLoss;


            if (!openerComplete && result.GCDStep > MAX_GCD_STEPS) return (ResultState.Dead, score);

            return (openerComplete ? ResultState.Conclusive : ResultState.Inconclusive, score);
        }

        public override (ResultState state, float score) GetInitialResultScore(SimulationState result)
        {
            if (result.CurrentTime < BUFF_WINDOW_MIN) return (ResultState.Inconclusive, 0);
            else if (!OpenerBuffsApplied(result)) return (ResultState.Dead, 0);

            return (ResultState.Conclusive, result.Damage.DPS);
        }

        private bool OpenerBuffsApplied(SimulationState state)
        {
            return Job.HasBuff(state, "Jinpu") && Job.HasBuff(state, "Shifu") && Job.HasDebuff(state, "Slashing Resistance Down");
        }

        public override IEnumerable<PlayerAction> GetActionSuggestions(SimulationState state)
        {
            var senCount = GetSenCount(state);
            var kaitenUp = Job.HasBuff(state, "Hissatsu: Kaiten");

            // Only use Iaijutsu when Kaiten is up.
            if (kaitenUp)
            {
                if (senCount == 3)
                {
                    yield return Job.Actions["Midare Setsugekka"];

                    yield break; // Force Midare when Kaiten is up. Prevents a bunch of dumb paths.
                }
                else if (senCount == 1 && (!Job.HasDoT(state, "Higanbana") || Job.GetRemainingDoTTime(state, "Higanbana") < 15))
                {
                    yield return Job.Actions["Higanbana"];

                    yield break; // Force Iaijutsu when Kaiten is up. Prevents a bunch of dumb paths.
                }
            }

            var kenki = state.Resource("Kenki");

            if (senCount >= 1 && !state.Cooldowns.IsCooldownRunning("Hagakure") && kenki <= (100 - (senCount * 20)))
                yield return Job.Actions["Hagakure"];

            // Kenki spenders
            if (state.GCD > 0 && kenki > 25)
                yield return Job.Actions["Hissatsu: Shinten"];

            if (state.GCD > 0 && kenki > 50 && !Job.OnCooldown(state, "Hissatsu: Guren", 118))
                yield return Job.Actions["Hissatsu: Guren"];

            if (state.GCD > 0 && kenki > 20 && !kaitenUp && (senCount == 3 || senCount == 1))
                yield return Job.Actions["Hissatsu: Kaiten"];

            // Meikyo Shisui. 
            //if (state.GCD > 0 && senCount < 3 && !Job.OnCooldown(state, "Meikyo Shisui", 80))
            if (senCount < 3 && !Job.OnCooldown(state, "Meikyo Shisui", 80))
                yield return Job.Actions["Meikyo Shisui"];

            // Combo actions
            if (Job.HasBuff(state, "Meikyo Shisui"))
            {
                // Any use of Meikyo Shisui to add buffs is self-defeating.
                if (!IsSenActive(state, "Gekko")) yield return Job.Actions["Gekko"];
                if (!IsSenActive(state, "Kasha")) yield return Job.Actions["Kasha"];
                if (!IsSenActive(state, "Yukikaze")) yield return Job.Actions["Yukikaze"];
            }
            else
            {
                if (Job.LastComboActionWas(state, "Hakaze"))
                {
                    if (!IsSenActive(state, "Kasha")) yield return Job.Actions["Shifu"];
                    if (!IsSenActive(state, "Gekko")) yield return Job.Actions["Jinpu"];
                    if (!IsSenActive(state, "Yukikaze")) yield return Job.Actions["Yukikaze"];
                }
                else if (Job.LastComboActionWas(state, "Jinpu") && !IsSenActive(state, "Gekko"))
                    yield return Job.Actions["Gekko"];
                else if (Job.LastComboActionWas(state, "Shifu") && !IsSenActive(state, "Kasha"))
                    yield return Job.Actions["Kasha"];
                else
                    yield return Job.Actions["Hakaze"];
            }
        }

        public int GetSenCount(SimulationState state)
        {
            return ((SamuraiJobMechanics)Job).GetSenCount(state);
        }

        public bool IsSenActive(SimulationState state, string senName)
        {
            return state.Resource(senName) == 1;
        }

        public override IEnumerable<(ResultState state, float score, SimulationState step)> GenerateInitialStates(SimulationState root)
        {
            var steps = TreeSimulation.GetLeaves(root).ToArray();

            foreach (var step in steps)
                step.PerformActions(GetActionSuggestions(step));

            var nextSteps = (from s in steps
                             from s2 in s.NextSteps
                             let r = GetInitialResultScore(s)
                             select (r.state, r.score, s2));

            foreach (var nextStep in nextSteps)
            {
                if (nextStep.Item1 == ResultState.Conclusive)
                    yield return nextStep;
            }

            var inconclusiveSteps = (from s in nextSteps where s.Item1 == ResultState.Inconclusive select s.Item3);

            if (inconclusiveSteps.Any())
                foreach (var n in inconclusiveSteps)
                    foreach (var r in GenerateInitialStates(n)) yield return r;
        }

        public override void HandleArguments(string[] args)
        {
            throw new NotImplementedException();
        }
    }
}
